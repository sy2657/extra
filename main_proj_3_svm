
## Model 4: svm ( kernel =  polynomial, linear, radial, sigmoid)

* Polynomial SVM:

```{r}
run.svm.polynomial.cv.test <- FALSE
run.train.svm.polynomial <- FALSE
plot.svm.polynomial <- FALSE
```

Cross validation:
```{r}
source("../lib/svm_polynomial_best_degree.R")
```

```{r}
tm_svm_polynomial_cv <- NA
max.deg = 4
testset <- as.matrix(dat_test[, -6007])
if (run.svm.polynomial.cv.test) {
  tm_svm_polynomial_cv <- system.time( acc.array <- svm_polynomial_best_degree(dat_train, dat_test, 5, testset) ) # up to degree 5
  max.deg <- which.max(acc.array)
} else {
  max.deg = 4
}
```

Train:
```{r}
tm_svm_polynomial_train <- NA
if (run.train.svm.polynomial) {
  sclassifier.polynomial = svm(formula=label~., data=dat_train, type="C", kernel="polynomial", degree=max.deg)
  save(sclassifier.polynomial, file="../output/svmclassifier_polynomial.RData")
} else{ 
  load(file="../output/svmclassifier_polynomial.RData")
}
```

Test: 
```{r}
testset <- as.matrix(dat_test[, -6007])
ypred <- predict(sclassifier.polynomial, testset) 
```

Plot (feature 1 and feature 2) :
```{r}
if (plot.svm.polynomial) {
  plot(sclassifier.polynomial, dat_train, formula=feature1~feature2, fill=T)
}
```

Evaluate:
```{r}
tab_svm <- table(ypred, dat_test$label)
n1 <- tab_svm[1]
n2 <- tab_svm[2]
n3 <- tab_svm[3]
n4 <- tab_svm[4]
num <- n1+n4
den <- n1+n2+n3+n4
acc <- num/den
cat("The accuracy of svm polynomial model:", acc*100, "%.\n")
```

* Probabilistic Polynomial SVM:

```{r}
run.svm.polynomial.prob.cv.test <- FALSE
run.svm.polynomial.prob.train <- FALSE
plot.svm.polynomial.prob <- FALSE
```

Cross validation:

```{r}
source("../lib/svm_polynomial_prob_best_degree.R")
```

```{r}
max.deg = 4
if (run.svm.polynomial.prob.cv.test) {
  acc.array <- svm_polynomial_prob_best_degree(dat_train, dat_test, 5, testset) # up to degree 5
  max.deg <- which.max(acc.array)
} else {
  max.deg = 4
}
```

Train:
```{r}
if (run.train.svm.polynomial) {
  sclassifier.polynomial.prob = svm(formula=label~., data=dat_train, type="C", kernel="polynomial", probability=TRUE, degree=max.deg)
  save(sclassifier.polynomial.prob, file="../output/svmclassifier_polynomial_prob.RData")
} else{ 
  load(file="../output/svmclassifier_polynomial_prob.RData")
}
```

Plot (feature 1 and feature 2) :
```{r}
if (plot.svm.polynomial.prob) {
  plot(sclassifier.polynomial.prob, dat_train, formula=feature1~feature2, fill=T)
  }
```



Test:
```{r}
testset <- as.matrix(dat_test[, -6007])
ypred_prob <- predict(sclassifier.polynomial.prob, testset, decision.values = TRUE, probability = TRUE)
```

Evaluate accuracy and auc:

```{r}
tab_svm <- table(ypred_prob, dat_test$label)
n1 <- tab_svm[1]
n2 <- tab_svm[2]
n3 <- tab_svm[3]
n4 <- tab_svm[4]
num <- n1+n4
den <- n1+n2+n3+n4
acc <- num/den
cat("The accuracy of svm probabilistic polynomial model:", acc*100, "%.\n")
# AUC
prob_vec_poly <- attr(ypred_prob, "probabilities")
prob_vec_poly_0 <- prob_vec_poly[,1]
prob_vec_poly_1 <- prob_vec_poly[,2]
r_prob <- roc(predictor= prob_vec_poly_1, response= factor(dat_test$label))
auc_prob <- auc(r_prob, min=0, max=1)
cat("The auc of svm prob. polynomial model:", auc_prob)
```


* Linear SVM:

```{r}
run.train.svm.linear <- FALSE
plot.svm.linear <- FALSE
```

Train:
```{r}
if (run.train.svm.linear) {
  sclassifier.linear =svm(formula=label~., data=dat_train, type="C", kernel="linear")
  save(sclassifier.linear, file="../output/svmclassifier_linear.RData")
 } else{
  load(file="../output/svmclassifier_linear.RData")
 }
```

Test:
```{r}
testset <- as.matrix(dat_test[, -6007])
ypred <- predict(sclassifier.linear, testset) 
```

Plot (feature 1 and feature 2) :
```{r}
if (plot.svm.linear) {
  plot(sclassifier.linear, dat_train, formula=feature1~feature2, fill=T)
}
```

Evaluate:
```{r}
tab_svm <- table(ypred, dat_test$label)
n1 <- tab_svm[1]
n2 <- tab_svm[2]
n3 <- tab_svm[3]
n4 <- tab_svm[4]
num <- n1+n4
den <- n1+n2+n3+n4
acc <- num/den
cat("The accuracy of svm linear model:", acc*100, "%.\n")
```

* Probabilistic Linear SVM:

```{r}
run.train.svm.linear.prob <- FALSE
plot.svm.linear.prob <- FALSE
```

Train:
```{r}
if (run.train.svm.linear.prob) {
  sclassifier.linear.prob = svm(formula=label~., data=dat_train, type="C", kernel="linear", probability=TRUE)
  save(sclassifier.linear.prob, file="../output/svmclassifier_linear_prob.RData")
 } else{
  load(file="../output/svmclassifier_linear_prob.RData")
 }
```


Plot (feature 1 and feature 2) :
```{r}
if (plot.svm.linear.prob) {
  plot(sclassifier.linear.prob, dat_train, formula=feature1~feature2, fill=T)
}
```


Test:
```{r}
testset <- as.matrix(dat_test[, -6007])
ypred_prob <- predict(sclassifier.linear.prob, testset, decision.values = TRUE, probability = TRUE)
```
Evaluate accuracy and auc:

```{r}
tab_svm <- table(ypred_prob, dat_test$label)
n1 <- tab_svm[1]
n2 <- tab_svm[2]
n3 <- tab_svm[3]
n4 <- tab_svm[4]
num <- n1+n4
den <- n1+n2+n3+n4
acc <- num/den
cat("The accuracy of svm probabilistic linear model:", acc*100, "%.\n")
# AUC
prob_vec <- attr(ypred_prob, "probabilities")
prob_vec_0 <- prob_vec[,1]
prob_vec_1 <- prob_vec[,2]
r_prob <- roc(predictor= prob_vec_1, response= factor(dat_test$label))
auc_prob <- auc(r_prob, min=0, max=1)
cat("The auc of svm prob. linear model:", auc_prob)
```



* Radial SVM:

```{r}
run.train.svm.radial <- FALSE
plot.svm.radial <- FALSE
```

Train:
```{r}
if (run.train.svm.radial) {
  sclassifier.radial <- svm(formula=label~., data=dat_train, type="C", kernel="radial")
  save(sclassifier.radial, file="..output/svmclassifier_radial.RData")
} else {
  load(file="../output/svmclassifier_radial.RData")
  }
```
Test: 
```{r}
testset <- as.matrix(dat_test[, -6007])
ypred <- predict(sclassifier.radial, testset) 
```

Plot (feature 1 and feature 2) :
```{r}
if (plot.svm.radial) {
  plot(sclassifier.radial, dat_train, formula=feature1~feature2, fill=T)
}
```

Evaluate:
```{r}
tab_svm <- table(ypred, dat_test$label)
n1 <- tab_svm[1]
n2 <- tab_svm[2]
n3 <- tab_svm[3]
n4 <- tab_svm[4]
num <- n1+n4
den <- n1+n2+n3+n4
acc <- num/den
cat("The accuracy of svm radial model:", acc*100, "%.\n")
```

* Probabilistic Radial SVM:
```{r}
run.train.svm.radial.prob <- FALSE
plot.svm.radial.prob <- FALSE
```

Train:
```{r}
if (run.train.svm.radial.prob) {
  sclassifier.radial.prob <- svm(formula=label~., data=dat_train, type="C", kernel="radial", probability=TRUE) 
  save(sclassifier.radial.prob, file="..output/svmclassifier_radial.RData")
} else {
  load(file="../output/svmclassifier_radial.RData")
  }
```

Test: 
```{r}
testset <- as.matrix(dat_test[, -6007])
ypred <- predict(sclassifier.radial, testset) 
```

Plot (feature 1 and feature 2) :
```{r}
if (plot.svm.radial.prob) {
  plot(sclassifier.radial.prob, dat_train, formula=feature1~feature2, fill=T)
}
```

Test:
```{r}
testset <- as.matrix(dat_test[, -6007])
ypred_prob <- predict(sclassifier.radial.prob, testset, decision.values = TRUE, probability = TRUE)
```

Evaluate accuracy and auc:

```{r}
tab_svm <- table(ypred_prob, dat_test$label)
n1 <- tab_svm[1]
n2 <- tab_svm[2]
n3 <- tab_svm[3]
n4 <- tab_svm[4]
num <- n1+n4
den <- n1+n2+n3+n4
acc <- num/den
cat("The accuracy of svm probabilistic radial model:", acc*100, "%.\n")
# AUC
prob_vec <- attr(ypred_prob, "probabilities")
prob_vec_0 <- prob_vec_poly[,1]
prob_vec_1 <- prob_vec_poly[,2]
r_prob <- roc(predictor= prob_vec_1, response= factor(dat_test$label))
auc_prob <- auc(r_prob, min=0, max=1)
cat("The auc of svm prob. radial model:", auc_prob)
```



* Sigmoid SVM:

```{r}
run.train.svm.sigmoid <- FALSE
plot.svm.sigmoid <- FALSE
```

Train:

```{r}
if (run.train.svm.sigmoid) {
  sclassifier.sigmoid <- svm(formula=label~., data=dat_train, type="C", kernel="sigmoid")
  save(sclassifier.sigmoid, file="../output/svmclassifier_sigmoid.RData")
} else {
  load(file="../output/svmclassifier_sigmoid.RData")
  }
```

Test: 
```{r}
testset <- as.matrix(dat_test[, -6007])
ypred <- predict(sclassifier.sigmoid, testset) 
```

Plot (feature 1 and feature 2) :
```{r}
if (plot.svm.sigmoid) {
  plot(sclassifier.sigmoid, dat_train, formula=feature1~feature2, fill=T)
}
```

Evaluate:
```{r}
tab_svm <- table(ypred, dat_test$label)
n1 <- tab_svm[1]
n2 <- tab_svm[2]
n3 <- tab_svm[3]
n4 <- tab_svm[4]
num <- n1+n4
den <- n1+n2+n3+n4
acc <- num/den
cat("The accuracy of svm sigmoid model:", acc*100, "%.\n")
```

* Probabilistic Sigmoid SVM:

```{r}
run.train.svm.sigmoid.prob <- FALSE
plot.svm.sigmoid.prob <- FALSE
```

Train:

```{r}
if (run.train.svm.sigmoid.prob) {
  sclassifier.sigmoid.prob <- svm(formula=label~., data=dat_train, type="C", kernel="sigmoid", probability=TRUE)
  save(sclassifier.sigmoid.prob, file="../output/svmclassifier_sigmoid_prob.RData")
} else {
  load(file="../output/svmclassifier_sigmoid_prob.RData")
  }
```

Test: 
```{r}
testset <- as.matrix(dat_test[, -6007])
ypred_prob <- predict(sclassifier.sigmoid.prob, testset, decision.values = TRUE, probability = TRUE)
```

Plot (feature 1 and feature 2) :
```{r}
if (plot.svm.sigmoid.prob) {
  plot(sclassifier.sigmoid.prob, dat_train, formula=feature1~feature2, fill=T)
}
```


Evaluate accuracy and auc:

```{r}
tab_svm <- table(ypred_prob, dat_test$label)
n1 <- tab_svm[1]
n2 <- tab_svm[2]
n3 <- tab_svm[3]
n4 <- tab_svm[4]
num <- n1+n4
den <- n1+n2+n3+n4
acc <- num/den
cat("The accuracy of svm probabilistic sigmoid model:", acc*100, "%.\n")
# AUC
prob_vec <- attr(ypred_prob, "probabilities")
prob_vec_0 <- prob_vec_poly[,1]
prob_vec_1 <- prob_vec_poly[,2]
r_prob <- roc(predictor= prob_vec_1, response= factor(dat_test$label))
auc_prob <- auc(r_prob, min=0, max=1)
cat("The auc of svm prob. sigmoid model:", auc_prob)
```

